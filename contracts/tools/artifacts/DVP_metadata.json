{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "owned",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "escrowForbidden",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "approveTrade",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "interfaceHash",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "canImplementInterfaceForAddress",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "operatorData",
						"type": "bytes"
					}
				],
				"name": "canReceive",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "cancelTrade",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "enableExecution",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "executeTrade",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "forceTrade",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getNbTrades",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress1",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenAddress2",
						"type": "address"
					}
				],
				"name": "getPriceOwnership",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress1",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenAddress2",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "tokenId1",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "tokenId2",
						"type": "bytes32"
					}
				],
				"name": "getTokenPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getTrade",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					},
					{
						"internalType": "enum DVP.TradeType",
						"name": "",
						"type": "uint8"
					},
					{
						"internalType": "enum DVP.State",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getTradeAcceptanceStatus",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getTradeApprovalStatus",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					}
				],
				"name": "priceOracles",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "registerContract",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "holder1",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "holder2",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "executer",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "expirationDate",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "tokenAddress1",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "tokenValue1",
								"type": "uint256"
							},
							{
								"internalType": "bytes32",
								"name": "tokenId1",
								"type": "bytes32"
							},
							{
								"internalType": "enum DVP.Standard",
								"name": "tokenStandard1",
								"type": "uint8"
							},
							{
								"internalType": "address",
								"name": "tokenAddress2",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "tokenValue2",
								"type": "uint256"
							},
							{
								"internalType": "bytes32",
								"name": "tokenId2",
								"type": "bytes32"
							},
							{
								"internalType": "enum DVP.Standard",
								"name": "tokenStandard2",
								"type": "uint8"
							},
							{
								"internalType": "enum DVP.TradeType",
								"name": "tradeType",
								"type": "uint8"
							},
							{
								"internalType": "enum DVP.SaleType",
								"name": "saleType",
								"type": "uint8"
							}
						],
						"internalType": "struct DVP.TradeRequestInput",
						"name": "inputData",
						"type": "tuple"
					}
				],
				"name": "requestTrade",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "oracles",
						"type": "address[]"
					}
				],
				"name": "setPriceOracles",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress1",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenAddress2",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "priceOwnership",
						"type": "bool"
					}
				],
				"name": "setPriceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "operators",
						"type": "address[]"
					}
				],
				"name": "setTokenControllers",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress1",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenAddress2",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "tokenId1",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "tokenId2",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "newPrice",
						"type": "uint256"
					}
				],
				"name": "setTokenPrice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "operators",
						"type": "address[]"
					}
				],
				"name": "setTradeExecuters",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "startDate",
						"type": "uint256"
					}
				],
				"name": "setVariablePriceStartDate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					}
				],
				"name": "tokenControllers",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					},
					{
						"internalType": "bytes32",
						"name": "partition",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "operatorData",
						"type": "bytes"
					}
				],
				"name": "tokensReceived",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tradeExecuters",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					}
				],
				"name": "variablePriceStartDate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Delivery-Vs-Payment contract for investor-to-investor token trades.Intended usage: The purpose of the contract is to allow secure token transfers/exchanges between 2 stakeholders (called holder1 and holder2). From now on, an operation in the DVP smart contract (transfer/exchange) is called a trade. Depending on the type of trade, one/multiple token transfers will be executed. The simplified workflow is the following: 1) A trade request is created in the DVP smart contract, it specifies:  - The token holder(s) involved in the trade  - The trade executer (optional)  - An expiration date  - Details on the first token (address, requested amount, standard)  - Details on the second token (address, requested amount, standard)  - Whether the tokens need to be escrowed in the DVP contract or not  - The current status of the trade (pending / executed / forced / cancelled) 2) The trade is accepted by both token holders 3) [OPTIONAL] The trade is approved by token controllers (only if requested by tokens controllers) 4) The trade is executed (either by the executer in case the executer is specified, or by anyone) STANDARD-AGNOSTIC: The DVP smart contract is standard-agnostic, it supports ETH, ERC20, ERC721, ERC1400. The advantage of using an ERC1400 token is to leverages its hook property, thus requiring ONE single transaction (operatorTransferByPartition()) to send tokens to the DVP smart contract instead of TWO with the ERC20 token standard (approve() + transferFrom()). OFF-CHAIN PAYMENT: The contract can be used as escrow contract while waiting for an off-chain payment. Once payment is received off-chain, the token sender realeases the tokens escrowed in the DVP contract to deliver them to the recipient. ESCROW VS SWAP MODE: In case escrow mode is selected, tokens need to be escrowed in DVP smart contract before the trade can occur. In case swap mode is selected, tokens are not escrowed in the DVP. Instead, the DVP contract is only allowed to transfer tokens ON BEHALF of their owners. When trade is executed, an atomic token swap occurs. EXPIRATION DATE: The trade can be cancelled by both parties in case expiration date is passed. CLAIMS: The executer has the ability to force or cancel the trade. In case of disagreement/missing payment, both parties can contact the \"executer\" of the trade to deposit a claim and solve the issue. MARKETPLACE: The contract can be used as a token marketplace. Indeed, when trades are created without specifying the recipient address, anyone can purchase them by sending the requested payment in exchange. PRICE ORACLES: When price oracles are defined, those can define the price at which trades need to be executed. This feature is particularly useful for assets with NAV (net asset value).",
			"kind": "dev",
			"methods": {
				"approveTrade(uint256,bool)": {
					"details": "Approve a trade (if the tokens involved in the trade are controlled) This function can only be called by a token controller of one of the tokens involved in the trade. Indeed, when a token smart contract is controlled by an owner, the owner can decide to open the secondary market by:  - Allowlisting the DVP smart contract  - Setting \"token controllers\" in the DVP smart contract, in order to approve all the trades made with his token",
					"params": {
						"approved": "'true' if trade is approved, 'false' if not.",
						"index": "Index of the trade to be executed."
					}
				},
				"canReceive(bytes,bytes32,address,address,address,uint256,bytes,bytes)": {
					"details": "Indicate whether or not the DVP contract can receive the tokens or not. [USED FOR ERC1400 TOKENS ONLY]",
					"params": {
						"data": "Information attached to the token transfer.",
						"operatorData": "Information attached to the DVP transfer, by the operator."
					},
					"returns": {
						"_0": "'true' if the DVP contract can receive the tokens, 'false' if not."
					}
				},
				"cancelTrade(uint256)": {
					"details": "Cancel a trade execution in the DVP contract by transferring tokens back to their initial owners.",
					"params": {
						"index": "Index of the trade to be cancelled."
					}
				},
				"constructor": {
					"details": "Initialize DVP + register the contract implementation in ERC1820Registry."
				},
				"enableExecution(bytes)": {
					"details": "Enable Trade Execution (only executor can do). This function can only be called by the executer specified at trade creation, for each trade.",
					"params": {
						"data": "containing all information needed for this function "
					}
				},
				"executeTrade(uint256)": {
					"details": "Execute a trade in the DVP contract if possible (e.g. if tokens have been esccrowed, in case it is required). This function can only be called by the executer specified at trade creation. If no executer is specified, the trade can be launched by anyone.",
					"params": {
						"index": "Index of the trade to be executed."
					}
				},
				"forceTrade(uint256)": {
					"details": "Force a trade execution in the DVP contract by transferring tokens back to their target recipients.",
					"params": {
						"index": "Index of the trade to be forced."
					}
				},
				"getNbTrades()": {
					"details": "Get the total number of requests in the DVP contract.",
					"returns": {
						"_0": "Total number of requests in the DVP contract."
					}
				},
				"getPrice(uint256)": {
					"details": "Get amount of token2 to pay to acquire the token1.",
					"params": {
						"index": "Index of the DVP request."
					}
				},
				"getPriceOwnership(address,address)": {
					"details": "Get price of the token.",
					"params": {
						"tokenAddress1": "Address of the token to be priced.",
						"tokenAddress2": "Address of the token to pay for token1."
					}
				},
				"getTokenPrice(address,address,bytes32,bytes32)": {
					"details": "Get price of the token.",
					"params": {
						"tokenAddress1": "Address of the token to be priced.",
						"tokenAddress2": "Address of the token to pay for token1.",
						"tokenId1": "ID/partition of the token2 (set to 0 bytes32 if price is set for all IDs/partitions)."
					}
				},
				"getTrade(uint256)": {
					"details": "Get the trade.",
					"params": {
						"index": "Index of the trade."
					},
					"returns": {
						"_0": "Trade."
					}
				},
				"getTradeAcceptanceStatus(uint256)": {
					"details": "Get global acceptance status for a given a trade.",
					"returns": {
						"_0": "Acceptance status."
					}
				},
				"getTradeApprovalStatus(uint256)": {
					"details": "Get global approval status for a given a trade.",
					"returns": {
						"_0": "Approval status."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"priceOracles(address)": {
					"details": "Get the list of price oracles for a given token.",
					"params": {
						"tokenAddress": "Token address."
					},
					"returns": {
						"_0": "List of addresses of all the price oracles for a given token."
					}
				},
				"registerContract()": {
					"returns": {
						"_0": "'true' if the the contract has been successfully registered"
					}
				},
				"renounceOwnership()": {
					"details": "Renounce ownership of the contract."
				},
				"requestTrade((address,address,address,uint256,address,uint256,bytes32,uint8,address,uint256,bytes32,uint8,uint8,uint8))": {
					"details": "Create a new trade request in the DVP smart contract.",
					"params": {
						"inputData": "The input for this function"
					}
				},
				"setPriceOracles(address,address[])": {
					"details": "Set list of price oracles for a given token.",
					"params": {
						"oracles": "Oracles addresses.",
						"tokenAddress": "Token address."
					}
				},
				"setPriceOwnership(address,address,bool)": {
					"details": "Take ownership for setting the price of a token.",
					"params": {
						"tokenAddress1": "Address of the token to be priced.",
						"tokenAddress2": "Address of the token to pay for token1."
					}
				},
				"setTokenControllers(address,address[])": {
					"details": "Set list of token controllers for a given token.",
					"params": {
						"operators": "Operators addresses.",
						"tokenAddress": "Token address."
					}
				},
				"setTokenPrice(address,address,bytes32,bytes32,uint256)": {
					"details": "Set price of a token.",
					"params": {
						"newPrice": "New price of the token.",
						"tokenAddress1": "Address of the token to be priced.",
						"tokenAddress2": "Address of the token to pay for token1.",
						"tokenId1": "ID/partition of the token1 (set to 0 bytes32 if price is set for all IDs/partitions).",
						"tokenId2": "ID/partition of the token2 (set to 0 bytes32 if price is set for all IDs/partitions)."
					}
				},
				"setTradeExecuters(address[])": {
					"details": "Set list of trade executers for the DVP contract.",
					"params": {
						"operators": "Trade executers addresses."
					}
				},
				"setVariablePriceStartDate(address,uint256)": {
					"details": "Set date after which the token price can potentially be set by an oracle (0 if price can not be set by an oracle).",
					"params": {
						"startDate": "Date after which token price can potentially be set by an oracle (0 if price can not be set by an oracle).",
						"tokenAddress": "Token address."
					}
				},
				"tokenControllers(address)": {
					"details": "Get the list of token controllers for a given token.",
					"params": {
						"tokenAddress": "Token address."
					},
					"returns": {
						"_0": "List of addresses of all the token controllers for a given token."
					}
				},
				"tokensReceived(bytes,bytes32,address,address,address,uint256,bytes,bytes)": {
					"details": "Hook function executed when tokens are sent to the DVP contract. [USED FOR ERC1400 TOKENS ONLY]",
					"params": {
						"data": "Information attached to the token transfer.",
						"from": "Token holder.",
						"operatorData": "Information attached to the DVP transfer, by the operator.",
						"partition": "Name of the partition.",
						"to": "Token recipient.",
						"value": "Number of tokens to transfer."
					}
				},
				"tradeExecuters()": {
					"details": "Get the list of trade executers as defined by the DVP contract.",
					"returns": {
						"_0": "List of addresses of all the trade executers."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"variablePriceStartDate(address)": {
					"details": "Get date after which the token price can potentially be set by an oracle (0 if price can not be set by an oracle).",
					"params": {
						"tokenAddress": "Token address."
					}
				}
			},
			"title": "DVP",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"canReceive(bytes,bytes32,address,address,address,uint256,bytes,bytes)": {
					"notice": "[ERC1400TokensRecipient INTERFACE (1/2)]"
				},
				"constructor": {
					"notice": "[DVP CONSTRUCTOR]"
				},
				"registerContract()": {
					"notice": "Set record in ERC1820 registry - can only be done time"
				},
				"tokensReceived(bytes,bytes32,address,address,address,uint256,bytes,bytes)": {
					"notice": "[ERC1400TokensRecipient INTERFACE (2/2)]"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/tools/DVP.sol": "DVP"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/CertificateSigner.sol": {
			"keccak256": "0xa356a96c3a3b63968d009601bc95b65df483b74abdc4a8755721038fa453f1cf",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://b595fd6caaa9f22ed9a6fd1864d00b2280960d0fc1d3378996eda5af21402862",
				"dweb:/ipfs/QmUWSuVqSEF96ZxW1F3GQHuLa6WZ7rvWMJ2vC1XxuK47Fq"
			]
		},
		"contracts/ERC1400.sol": {
			"keccak256": "0xfd1e9c3dae41744e94369f6349467081f0a5f15536c65524162f7050b6df200f",
			"urls": [
				"bzz-raw://a89017b386bbb4058335ba49735205ee5e9730adc3c6b465976f309f6701259a",
				"dweb:/ipfs/QmVKi5pxp9HPwigSMa6jtA8yYJbGxCFWd6NUAKajRs6YRU"
			]
		},
		"contracts/IERC1400.sol": {
			"keccak256": "0xf8fb0d5cb6eb0bd5da86836cf6cbd5c233f5442d5ee1dc53253d761b3627b0c9",
			"urls": [
				"bzz-raw://0ee900a906ec46c5b4fcbe52f88c0db9cb1254ab68bd141ac07d115f3660f1c7",
				"dweb:/ipfs/QmQE6aMScyEu9j6zkS55tXK3m2eGtAMgXYRo2fQTAgJceV"
			]
		},
		"contracts/extensions/tokenExtensions/ERC1400TokensChecker.sol": {
			"keccak256": "0x69f192c654677afa36f4436559e349785c553bdace1a8a7a5f7f608bfa6c065c",
			"urls": [
				"bzz-raw://faee3ed0f9f65e2a680e89bd51583f6554ec27c7cf9a75338f89f5b8b7bf8983",
				"dweb:/ipfs/QmezF9JyUtAsWZZD4gdhCbcGXQb4ggp3RmWjpiwu8F5rEn"
			]
		},
		"contracts/extensions/tokenExtensions/ERC1400TokensValidator.sol": {
			"keccak256": "0xafd96c5f21530912227ef3a56a594fe6abbc0fa098e13d8e458c54ce8379e9d9",
			"urls": [
				"bzz-raw://2cd5f16bc2d746f27ca173269c2f273e928ca723b205aa8ac5fbf9c718248962",
				"dweb:/ipfs/QmamCxGd3Q73MUvXE6jrksgwUvH7S7LWUYTVtH9jRkoH29"
			]
		},
		"contracts/extensions/tokenExtensions/IERC1400TokensChecker.sol": {
			"keccak256": "0x6ebd09355e941847e8cd872f3e7a66002bc60e4f65ea2faebf3e9215b278a92a",
			"urls": [
				"bzz-raw://13bbda5dfc73739d22b119ad0b6b5e0c945f64e1a20490c15870cdef71660ef0",
				"dweb:/ipfs/QmYUay1mbgekG8vtaaXvfLQkRdb7BVXoAAsaPeg92qPqRq"
			]
		},
		"contracts/extensions/tokenExtensions/IERC1400TokensValidator.sol": {
			"keccak256": "0x96b357e319f554a2e46abf704f0971d87c66f916f483dfd2bdbf3e2e0b78545c",
			"urls": [
				"bzz-raw://1966b60443eec753a27cfc7c62e336ea9e3f7fba3736a4c417669187a9d5e202",
				"dweb:/ipfs/QmWFGYCoKKkoXGXwDE1LjhRHyBUhVQ8dbfmdVsZfWYPjAv"
			]
		},
		"contracts/extensions/userExtensions/ERC1400TokensRecipient.sol": {
			"keccak256": "0xcf720efb792be04eea42c629ccd9ec6b912b7479bb2e13ad331bbf5622fb3ef7",
			"urls": [
				"bzz-raw://53752d75e8fbf1d5a72a214e2def1af022aad8236531d7677b44275f87ae29f7",
				"dweb:/ipfs/QmRnZzjvBG9uG45BjeyJ1keyHfYc17rfNkfqZcPWG7oV2t"
			]
		},
		"contracts/extensions/userExtensions/ERC1400TokensSender.sol": {
			"keccak256": "0x60877467e74124c8c893e04b803eada7b3f90cff3c729c478c6ca79f860ce5dc",
			"urls": [
				"bzz-raw://42002e50c84aa215b913790a8556aa372a9eeeab0c4217d4342efb1d7e20b36d",
				"dweb:/ipfs/Qma73CPP2xRTieUntN2KtgUZYq42gFfGoJk7u6HaLohAi3"
			]
		},
		"contracts/extensions/userExtensions/IERC1400TokensRecipient.sol": {
			"keccak256": "0x6bc583d1a37e75b4c09e38477ecd3eb0ecb00a4a437d352d36bacdf3b0643f6e",
			"urls": [
				"bzz-raw://69461c2686518549fad82967459de7e9e9436601736f2c288a328f5660d41906",
				"dweb:/ipfs/QmTrZ5rbxcQo3poz1A5AXSG4S4swMA3EtNo5aWx2VbfrPN"
			]
		},
		"contracts/extensions/userExtensions/IERC1400TokensSender.sol": {
			"keccak256": "0x01040b5c0c97bec4ba23e8704d2bec3a1b689287dc5b8c50759f697a51e10d9e",
			"urls": [
				"bzz-raw://f95ce73f9fdded66fa18fbad61a6b4f646c1f45d4ca37f3236cb208b71b5cd35",
				"dweb:/ipfs/QmPoXsqqj4gABiaArfpfUbiePmxQFVPGmwXfiEvVykwuL7"
			]
		},
		"contracts/interface/ERC1820Implementer.sol": {
			"keccak256": "0x787313c590b50d6c0cc28cf322119dae8fec2ad30d0b78475407c094eeeab2fe",
			"urls": [
				"bzz-raw://d9395f59c03bc54eca2d3b373b4ab6d7f1d3e66783d0b437c730eb6485216570",
				"dweb:/ipfs/QmXHfE1D3Q7f8cgJtvkyJJm2jSt3UUt5hFtQCSh5ZYLevz"
			]
		},
		"contracts/interface/IERC1643.sol": {
			"keccak256": "0x1148340ae449f3826dd691fb042a57d07337714c66096f8dd20ce1dbfe2c60fd",
			"urls": [
				"bzz-raw://406ed78b6254cd6833ea469759cfde23585e03c92b1bacb08b6d662f5ddc56c8",
				"dweb:/ipfs/QmXTSonY6bT4F8N7QdRdaosw8NsPeLFFAjtCkNbb49XdYc"
			]
		},
		"contracts/openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0x7964325af90ec05d3146e23038fccf8c9928b29f900ee91b50fe45468cc43ad8",
			"license": "MIT",
			"urls": [
				"bzz-raw://1affb8886805321a0565e09f0ed1d7b51ebed4a4f3577d0d641421e2803805d9",
				"dweb:/ipfs/QmbPdEczHBGQyqqZpu79Z9p2p4598HykycyjmQxiscSVyt"
			]
		},
		"contracts/openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8",
			"license": "MIT",
			"urls": [
				"bzz-raw://300a0cc7be3b26c96c22a47ffa9530a585e1c4f2dba3021d9bf309dc63007487",
				"dweb:/ipfs/QmQmxsvxK6CaJmQ4D8vDCYPLHMqcMmZLcBqedG4GFAbzu9"
			]
		},
		"contracts/openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da",
			"license": "MIT",
			"urls": [
				"bzz-raw://2c3d0973630ed74f2b5ce3944677a885dc70ec32fc83b35f55045a10224da32b",
				"dweb:/ipfs/QmbefZ5RoEZKNHXCALfh683PnaNYzKPcKMFjyY1DVAgq8A"
			]
		},
		"contracts/openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
				"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
			]
		},
		"contracts/openzeppelin/contracts/token/ERC721/ERC721.sol": {
			"keccak256": "0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4",
			"license": "MIT",
			"urls": [
				"bzz-raw://46e3ecc8920aeb78c362a387520fe28e022cdc6d04256d9e5874eb8ff6868b6d",
				"dweb:/ipfs/QmdfCTHrV6CZMGiM3KqGF8tWkdNvGpEmWFyy72X1LAHsz2"
			]
		},
		"contracts/openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990",
			"license": "MIT",
			"urls": [
				"bzz-raw://a439187f7126d31add4557f82d8aed6be0162007cd7182c48fd934dbab8f3849",
				"dweb:/ipfs/QmRPLguRFvrRJS7r6F1bcLvsx6q1VrgjEpZafyeL8D7xZh"
			]
		},
		"contracts/openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f",
			"license": "MIT",
			"urls": [
				"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f",
				"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a"
			]
		},
		"contracts/openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
			"license": "MIT",
			"urls": [
				"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
				"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
			]
		},
		"contracts/openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4",
			"license": "MIT",
			"urls": [
				"bzz-raw://997ca03557985b3c6f9143a18b6c3a710b3bc1c7f189ee956d305a966ecfb922",
				"dweb:/ipfs/QmQaD3Wb62F88SHqmpLttvF6wKuPDQep2LLUcKPekeRzvz"
			]
		},
		"contracts/openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"contracts/openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45",
			"license": "MIT",
			"urls": [
				"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30",
				"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2"
			]
		},
		"contracts/openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
				"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
			]
		},
		"contracts/openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"contracts/openzeppelin/contracts/utils/introspection/IERC1820Registry.sol": {
			"keccak256": "0x6e306f9ab28416a9e5931f0b6e264676e8ac68fad184f9a9d8bb125c6ec23bc3",
			"license": "MIT",
			"urls": [
				"bzz-raw://bd7fe961c914caa1fcc8223d446c1582aec4f2a32d2f06cf09c938b72cf8ce11",
				"dweb:/ipfs/QmPfEfqtUh9SA86br28HfmMyVSBe22B3oPwF8iACCF4evY"
			]
		},
		"contracts/openzeppelin/contracts/utils/math/SafeMath.sol": {
			"keccak256": "0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21",
			"license": "MIT",
			"urls": [
				"bzz-raw://973868f808e88e21a1a0a01d4839314515ee337ad096286c88e41b74dcc11fc2",
				"dweb:/ipfs/QmfYuZxRfx2J2xdk4EXN7jKg4bUYEMTaYk9BAw9Bqn4o2Y"
			]
		},
		"contracts/roles/AllowlistAdminRole.sol": {
			"keccak256": "0xa682cd2438342802e52fae2924826f4266d11113f5f30b40587af8691d05826f",
			"urls": [
				"bzz-raw://443f0c6b9369441069409f583e169fa79253663d479e176959df6268116d51d6",
				"dweb:/ipfs/QmTbAg7bP33Q4jzckRpbfDSpSvn4DttV6shCthL3ocGCn7"
			]
		},
		"contracts/roles/AllowlistedRole.sol": {
			"keccak256": "0x4ddf57e4ab62da38030d6843c450fb0b749993481e2fe207cbde3871961d5636",
			"urls": [
				"bzz-raw://513cff72e4f8dab41f1ba41d855dee6b6ff6de99cac6528473108c48ec0ff731",
				"dweb:/ipfs/QmWH7ZUhmgghtd6NYMuvx7uojf9wXSszukrUV1q63BExSS"
			]
		},
		"contracts/roles/BlocklistAdminRole.sol": {
			"keccak256": "0x7bde2ba9bd805c7fcfb16ba1b6028e078f46f2b82e8f559aaf00b8342b587fe9",
			"urls": [
				"bzz-raw://99f8a32db9642fb9acca4b199f6e0dc1c63b15669a4ddfc02f29c7adb7521c2d",
				"dweb:/ipfs/QmW1N9RHYUVVNksvcRXDGytEtoothijW9adXyKowTnBK8N"
			]
		},
		"contracts/roles/BlocklistedRole.sol": {
			"keccak256": "0xf2264840d35ec2e5d78f56cf107a26905e417996569d60f3dfc295ff34bbeb15",
			"urls": [
				"bzz-raw://a002e6834fc6070df85abb798a89f96e14cac09e02d3a66109218ed08369e15a",
				"dweb:/ipfs/Qmc4d3ujZ8yrRXWMMrH5T2qzYGZyBRaGTgDodpv5qAS8V2"
			]
		},
		"contracts/roles/CertificateSignerRole.sol": {
			"keccak256": "0x3df52dfd0cff66d84c1cd73b7aa04fa5a6370b9a26cec2179a93c8b313528122",
			"urls": [
				"bzz-raw://16bcfe786f6c1f53d8f0368de8c2d20ec9782a819f69bbbd41065e6951ba13ef",
				"dweb:/ipfs/Qmb1J8Z7dmDJ4NsxkNWuYjpFCAcwPfF8GGkF7TkFUbV9SK"
			]
		},
		"contracts/roles/MinterRole.sol": {
			"keccak256": "0x318d73a86276b5c446b93a81875bb1b4c8c1c57c2e8bc65293638687e539c161",
			"urls": [
				"bzz-raw://b3a44139e4bf6b0454f61976b978ca7109ad9916605290aed8d02495a0531e49",
				"dweb:/ipfs/QmWhDoHjhjfLUvkGkYYGwYiAb8V4UfMJgbKw9DawCdwHfj"
			]
		},
		"contracts/roles/PauserRole.sol": {
			"keccak256": "0x4e61b6084651f467ac21eb3a2efe1b90871fe5bbf54ba088734e9e83ec54008e",
			"urls": [
				"bzz-raw://b94441555dee2ea06591309ac21eeef899624fd2325b0f4450211f33734c8769",
				"dweb:/ipfs/Qmaz7X6S6HxdxEkbWdvbxYUBjZo6fixSy6WRrG7iskspqF"
			]
		},
		"contracts/roles/Roles.sol": {
			"keccak256": "0x90ac2a725a9e547642258ed98bcff321146bfa680d4c68b781e0d91ea7cfd0d4",
			"urls": [
				"bzz-raw://1b88a9d1aa79dd0e127524645576684b0930c38c4583986182a071c3039f41a2",
				"dweb:/ipfs/QmdS7fm3shy6QE5zsiMogSFjzvG9qBu4hv6UmZXjHt5n69"
			]
		},
		"contracts/tools/DVP.sol": {
			"keccak256": "0xfc06d13f0cdbab13675a7e75e0232581cd9c8e809e66bb5289db44f0202172c8",
			"urls": [
				"bzz-raw://a2efcca6d5c82a501513568aa27783aeb807675713127a0a8d2c8e92de239bae",
				"dweb:/ipfs/QmaZVVwjrKUQCnfS4zrWGBUb75JM6npMfaRZ1dnGRene7a"
			]
		},
		"contracts/tools/DomainAware.sol": {
			"keccak256": "0x60bfd9cdd67f93368662914f575e00a5ced7d5a9060452b9b50fe09e31e3473c",
			"urls": [
				"bzz-raw://ee54939d05e9ea1267140be4574db6750c2149882acf5f1c72a72352aab89b6b",
				"dweb:/ipfs/QmVajgzuYwLLmFWQjQdArGjiPyt5zopPRMzJepGK2nzYGR"
			]
		},
		"contracts/tools/ERC1820Client.sol": {
			"keccak256": "0x7d2ee601635e3ab8526526a0a475068a2bf71161925603720476231305dedef2",
			"urls": [
				"bzz-raw://684dd36a1a5660bef6581ada0c50000e6113ada39ac9862e9f28c022bb1589c8",
				"dweb:/ipfs/QmQaR6iMk8yQfoRgDUauvHuR1WUZQmzfmxhZPsQMFEVVkH"
			]
		},
		"contracts/tools/ERC1820Registry.sol": {
			"keccak256": "0x4be47aca1916885210538acb908d4f57e86d81ce0acfa76b3dbb8a215ad678b8",
			"urls": [
				"bzz-raw://e3d005472dc66cc957a207bfe7da7fc1efb393af16d819d77ff905e1d6efcaa6",
				"dweb:/ipfs/QmeZtrfQzQvxfK2sJGrjfgxkBBDiLMDjP2L6QhJWTMqoNF"
			]
		},
		"contracts/tools/Pausable.sol": {
			"keccak256": "0x50408db0a442b72a072c16652b6ea7bc35bd5493dddc307ccb85664a2cb28146",
			"urls": [
				"bzz-raw://d6f137eb5de377f6a86138d73b2129d6a6272e8808ca7269f99b1af82fadd786",
				"dweb:/ipfs/QmX87E9iFtF7AUvPpRHL3FWxW5axZvpyGpxx53BZQiZheM"
			]
		}
	},
	"version": 1
}