{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "granularity",
						"type": "uint256"
					},
					{
						"internalType": "address[]",
						"name": "controllers",
						"type": "address[]"
					},
					{
						"internalType": "bytes32[]",
						"name": "defaultPartitions",
						"type": "bytes32[]"
					},
					{
						"internalType": "address[]",
						"name": "certifiedSigners",
						"type": "address[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "partition",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "ApprovalByPartition",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenHolder",
						"type": "address"
					}
				],
				"name": "AuthorizedOperator",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "partition",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenHolder",
						"type": "address"
					}
				],
				"name": "AuthorizedOperatorByPartition",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "CertificateSignerAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "CertificateSignerRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "fromPartition",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "toPartition",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "ChangedPartition",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "certId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "approvedUser",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "docURI",
						"type": "string"
					}
				],
				"name": "CreateCertificate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "name",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "uri",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "documentHash",
						"type": "bytes32"
					}
				],
				"name": "DocumentRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "name",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "uri",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "documentHash",
						"type": "bytes32"
					}
				],
				"name": "DocumentUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "Issued",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "partition",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "operatorData",
						"type": "bytes"
					}
				],
				"name": "IssuedByPartition",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "MinterAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "MinterRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenHolder",
						"type": "address"
					}
				],
				"name": "RevokedOperator",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "partition",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenHolder",
						"type": "address"
					}
				],
				"name": "RevokedOperatorByPartition",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "fromPartition",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "operatorData",
						"type": "bytes"
					}
				],
				"name": "TransferByPartition",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "addCertificateSigner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "addMinter",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "partition",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowanceByPartition",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "partition",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "approveByPartition",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "_certName",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_certDescription",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "_expiredDate",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "_docURI",
						"type": "string"
					}
				],
				"name": "approveCertificate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "authorizeOperator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "partition",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "authorizeOperatorByPartition",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenHolder",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "partition",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "tokenHolder",
						"type": "address"
					}
				],
				"name": "balanceOfByPartition",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "interfaceHash",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					}
				],
				"name": "canImplementInterfaceForAddress",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "certificateListByAddress",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "id",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "certCreator",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "certName",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "certDescription",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "docURI",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "issuedDate",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "expiredDate",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "controllers",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "partition",
						"type": "bytes32"
					}
				],
				"name": "controllersByPartition",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "domainName",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "domainSeparator",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "domainVersion",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "generateDomainSeparator",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllDocuments",
				"outputs": [
					{
						"internalType": "bytes32[]",
						"name": "",
						"type": "bytes32[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getDefaultPartitions",
				"outputs": [
					{
						"internalType": "bytes32[]",
						"name": "",
						"type": "bytes32[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "name",
						"type": "bytes32"
					}
				],
				"name": "getDocument",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "granularity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "isCertificateSigner",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isControllable",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isIssuable",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "isMinter",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenHolder",
						"type": "address"
					}
				],
				"name": "isOperator",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "partition",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenHolder",
						"type": "address"
					}
				],
				"name": "isOperatorForPartition",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenHolder",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "issue",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "partition",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "tokenHolder",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "issueByPartition",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newContractAddress",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "definitive",
						"type": "bool"
					}
				],
				"name": "migrate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "partition",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "operatorData",
						"type": "bytes"
					}
				],
				"name": "operatorTransferByPartition",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenHolder",
						"type": "address"
					}
				],
				"name": "partitionsOf",
				"outputs": [
					{
						"internalType": "bytes32[]",
						"name": "",
						"type": "bytes32[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "removeCertificateSigner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_name",
						"type": "bytes32"
					}
				],
				"name": "removeDocument",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "removeMinter",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "renounceCertificateSigner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceControl",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceMinter",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "revokeOperator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "partition",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "revokeOperatorByPartition",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "operators",
						"type": "address[]"
					}
				],
				"name": "setControllers",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "partitions",
						"type": "bytes32[]"
					}
				],
				"name": "setDefaultPartitions",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "name",
						"type": "bytes32"
					},
					{
						"internalType": "string",
						"name": "uri",
						"type": "string"
					},
					{
						"internalType": "bytes32",
						"name": "documentHash",
						"type": "bytes32"
					}
				],
				"name": "setDocument",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "setERC1820",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "setInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "partition",
						"type": "bytes32"
					},
					{
						"internalType": "address[]",
						"name": "operators",
						"type": "address[]"
					}
				],
				"name": "setPartitionControllers",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "extension",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "interfaceLabel",
						"type": "string"
					},
					{
						"internalType": "bool",
						"name": "removeOldExtensionRoles",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "addMinterRoleForExtension",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "addControllerRoleForExtension",
						"type": "bool"
					}
				],
				"name": "setTokenExtension",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalPartitions",
				"outputs": [
					{
						"internalType": "bytes32[]",
						"name": "",
						"type": "bytes32[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "partition",
						"type": "bytes32"
					}
				],
				"name": "totalSupplyByPartition",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "partition",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "transferByPartition",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "transferFromWithData",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "transferWithData",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					}
				],
				"name": "viewCertificateInfo",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "ERC1400 logic",
			"kind": "dev",
			"methods": {
				"allowance(address,address)": {
					"details": "Check the value of tokens that an owner allowed to a spender.",
					"params": {
						"owner": "address The address which owns the funds.",
						"spender": "address The address which will spend the funds."
					},
					"returns": {
						"_0": "A uint256 specifying the value of tokens still available for the spender."
					}
				},
				"allowanceByPartition(bytes32,address,address)": {
					"details": "Check the value of tokens that an owner allowed to a spender.",
					"params": {
						"owner": "address The address which owns the funds.",
						"partition": "Name of the partition.",
						"spender": "address The address which will spend the funds."
					},
					"returns": {
						"_0": "A uint256 specifying the value of tokens still available for the spender."
					}
				},
				"approve(address,uint256)": {
					"details": "Approve the passed address to spend the specified amount of tokens on behalf of 'msg.sender'.",
					"params": {
						"spender": "The address which will spend the funds.",
						"value": "The amount of tokens to be spent."
					},
					"returns": {
						"_0": "A boolean that indicates if the operation was successful."
					}
				},
				"approveByPartition(bytes32,address,uint256)": {
					"details": "Approve the passed address to spend the specified amount of tokens on behalf of 'msg.sender'.",
					"params": {
						"partition": "Name of the partition.",
						"spender": "The address which will spend the funds.",
						"value": "The amount of tokens to be spent."
					},
					"returns": {
						"_0": "A boolean that indicates if the operation was successful."
					}
				},
				"authorizeOperator(address)": {
					"details": "Set a third party operator address as an operator of 'msg.sender' to transfer and redeem tokens on its behalf.",
					"params": {
						"operator": "Address to set as an operator for 'msg.sender'."
					}
				},
				"authorizeOperatorByPartition(bytes32,address)": {
					"details": "Set 'operator' as an operator for 'msg.sender' for a given partition.",
					"params": {
						"operator": "Address to set as an operator for 'msg.sender'.",
						"partition": "Name of the partition."
					}
				},
				"balanceOf(address)": {
					"details": "Get the balance of the account with address 'tokenHolder'.",
					"params": {
						"tokenHolder": "Address for which the balance is returned."
					},
					"returns": {
						"_0": "Amount of token held by 'tokenHolder' in the token contract."
					}
				},
				"balanceOfByPartition(bytes32,address)": {
					"details": "Get balance of a tokenholder for a specific partition.",
					"params": {
						"partition": "Name of the partition.",
						"tokenHolder": "Address for which the balance is returned."
					},
					"returns": {
						"_0": "Amount of token of partition 'partition' held by 'tokenHolder' in the token contract."
					}
				},
				"constructor": {
					"details": "Initialize ERC1400 + register the contract implementation in ERC1820Registry.",
					"params": {
						"controllers": "Array of initial controllers.",
						"defaultPartitions": "Partitions chosen by default, when partition is not specified, like the case ERC20 tranfers.",
						"granularity": "Granularity of the token.",
						"name": "Name of the token.",
						"symbol": "Symbol of the token."
					}
				},
				"controllers()": {
					"details": "Get the list of controllers as defined by the token contract.",
					"returns": {
						"_0": "List of addresses of all the controllers."
					}
				},
				"controllersByPartition(bytes32)": {
					"details": "Get controllers for a given partition.",
					"params": {
						"partition": "Name of the partition."
					},
					"returns": {
						"_0": "Array of controllers for partition."
					}
				},
				"decimals()": {
					"details": "Get the number of decimals of the token.",
					"returns": {
						"_0": "The number of decimals of the token. For retrocompatibility, decimals are forced to 18 in ERC1400."
					}
				},
				"getDefaultPartitions()": {
					"details": "Get default partitions to transfer from. Function used for ERC20 retrocompatibility. For example, a security token may return the bytes32(\"unrestricted\").",
					"returns": {
						"_0": "Array of default partitions."
					}
				},
				"getDocument(bytes32)": {
					"details": "Access a document associated with the token.",
					"params": {
						"name": "Short name (represented as a bytes32) associated to the document."
					},
					"returns": {
						"_0": "Requested document + document hash + document timestamp."
					}
				},
				"granularity()": {
					"details": "Get the smallest part of the token that’s not divisible.",
					"returns": {
						"_0": "The smallest non-divisible part of the token."
					}
				},
				"isControllable()": {
					"details": "Know if the token can be controlled by operators. If a token returns 'false' for 'isControllable()'' then it MUST always return 'false' in the future.",
					"returns": {
						"_0": "bool 'true' if the token can still be controlled by operators, 'false' if it can't anymore."
					}
				},
				"isIssuable()": {
					"details": "Know if new tokens can be issued in the future.",
					"returns": {
						"_0": "bool 'true' if tokens can still be issued by the issuer, 'false' if they can't anymore."
					}
				},
				"isOperator(address,address)": {
					"details": "Indicate whether the operator address is an operator of the tokenHolder address.",
					"params": {
						"operator": "Address which may be an operator of tokenHolder.",
						"tokenHolder": "Address of a token holder which may have the operator address as an operator."
					},
					"returns": {
						"_0": "'true' if operator is an operator of 'tokenHolder' and 'false' otherwise."
					}
				},
				"isOperatorForPartition(bytes32,address,address)": {
					"details": "Indicate whether the operator address is an operator of the tokenHolder address for the given partition.",
					"params": {
						"operator": "Address which may be an operator of tokenHolder for the given partition.",
						"partition": "Name of the partition.",
						"tokenHolder": "Address of a token holder which may have the operator address as an operator for the given partition."
					},
					"returns": {
						"_0": "'true' if 'operator' is an operator of 'tokenHolder' for partition 'partition' and 'false' otherwise."
					}
				},
				"issue(address,uint256,bytes)": {
					"details": "Issue tokens from default partition.",
					"params": {
						"data": "Information attached to the issuance, by the issuer.",
						"tokenHolder": "Address for which we want to issue tokens.",
						"value": "Number of tokens issued."
					}
				},
				"issueByPartition(bytes32,address,uint256,bytes)": {
					"details": "Issue tokens from a specific partition.",
					"params": {
						"data": "Information attached to the issuance, by the issuer.",
						"partition": "Name of the partition.",
						"tokenHolder": "Address for which we want to issue tokens.",
						"value": "Number of tokens issued."
					}
				},
				"migrate(address,bool)": {
					"details": "Migrate contract. ===> CAUTION: DEFINITIVE ACTION  This function shall be called once a new version of the smart contract has been created. Once this function is called:  - The address of the new smart contract is set in ERC1820 registry  - If the choice is definitive, the current smart contract is turned off and can never be used again",
					"params": {
						"definitive": "If set to 'true' the contract is turned off definitely.",
						"newContractAddress": "Address of the new version of the smart contract."
					}
				},
				"name()": {
					"details": "Get the name of the token, e.g., \"MyToken\".",
					"returns": {
						"_0": "Name of the token."
					}
				},
				"operatorTransferByPartition(bytes32,address,address,uint256,bytes,bytes)": {
					"details": "Transfer tokens from a specific partition through an operator.",
					"params": {
						"data": "Information attached to the transfer. [CAN CONTAIN THE DESTINATION PARTITION]",
						"from": "Token holder.",
						"operatorData": "Information attached to the transfer, by the operator.",
						"partition": "Name of the partition.",
						"to": "Token recipient.",
						"value": "Number of tokens to transfer."
					},
					"returns": {
						"_0": "Destination partition."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"partitionsOf(address)": {
					"details": "Get partitions index of a tokenholder.",
					"params": {
						"tokenHolder": "Address for which the partitions index are returned."
					},
					"returns": {
						"_0": "Array of partitions index of 'tokenHolder'."
					}
				},
				"renounceControl()": {
					"details": "Definitely renounce the possibility to control tokens on behalf of tokenHolders. Once set to false, '_isControllable' can never be set to 'true' again."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"revokeOperator(address)": {
					"details": "Remove the right of the operator address to be an operator for 'msg.sender' and to transfer and redeem tokens on its behalf.",
					"params": {
						"operator": "Address to rescind as an operator for 'msg.sender'."
					}
				},
				"revokeOperatorByPartition(bytes32,address)": {
					"details": "Remove the right of the operator address to be an operator on a given partition for 'msg.sender' and to transfer and redeem tokens on its behalf.",
					"params": {
						"operator": "Address to rescind as an operator on given partition for 'msg.sender'.",
						"partition": "Name of the partition."
					}
				},
				"setControllers(address[])": {
					"details": "Set list of token controllers.",
					"params": {
						"operators": "Controller addresses."
					}
				},
				"setDefaultPartitions(bytes32[])": {
					"details": "Set default partitions to transfer from. Function used for ERC20 retrocompatibility.",
					"params": {
						"partitions": "partitions to use by default when not specified."
					}
				},
				"setDocument(bytes32,string,bytes32)": {
					"details": "Associate a document with the token.",
					"params": {
						"documentHash": "Hash of the document [optional parameter].",
						"name": "Short name (represented as a bytes32) associated to the document.",
						"uri": "Document content."
					}
				},
				"setERC1820(address)": {
					"details": "Set the ERC1820 registry ",
					"params": {
						"_address": "Address of ERC1820 registry for that contract"
					}
				},
				"setInterface()": {
					"details": "Sets the record in the registry",
					"returns": {
						"_0": "True if successful"
					}
				},
				"setPartitionControllers(bytes32,address[])": {
					"details": "Set list of token partition controllers.",
					"params": {
						"operators": "Controller addresses.",
						"partition": "Name of the partition."
					}
				},
				"setTokenExtension(address,string,bool,bool,bool)": {
					"details": "Set token extension contract address. The extension contract can for example verify \"ERC1400TokensValidator\" or \"ERC1400TokensChecker\" interfaces. If the extension is an \"ERC1400TokensValidator\", it will be called everytime a transfer is executed.",
					"params": {
						"addControllerRoleForExtension": "If set to 'true', the extension contract will be added as controller.",
						"addMinterRoleForExtension": "If set to 'true', the extension contract will be added as minter.",
						"extension": "Address of the extension contract.",
						"interfaceLabel": "Interface label of extension contract.",
						"removeOldExtensionRoles": "If set to 'true', the roles of the old extension(minter, controller) will be removed extension."
					}
				},
				"symbol()": {
					"details": "Get the symbol of the token, e.g., \"MYT\".",
					"returns": {
						"_0": "Symbol of the token."
					}
				},
				"totalPartitions()": {
					"details": "Get list of existing partitions.",
					"returns": {
						"_0": "Array of all exisiting partitions."
					}
				},
				"totalSupply()": {
					"details": "Get the total number of issued tokens.",
					"returns": {
						"_0": "Total supply of tokens currently in circulation."
					}
				},
				"totalSupplyByPartition(bytes32)": {
					"details": "Get the total number of issued tokens for a given partition.",
					"params": {
						"partition": "Name of the partition."
					},
					"returns": {
						"_0": "Total supply of tokens currently in circulation, for a given partition."
					}
				},
				"transfer(address,uint256)": {
					"details": "Transfer token for a specified address.",
					"params": {
						"to": "The address to transfer to.",
						"value": "The value to be transferred."
					},
					"returns": {
						"_0": "A boolean that indicates if the operation was successful."
					}
				},
				"transferByPartition(bytes32,address,uint256,bytes)": {
					"details": "Transfer tokens from a specific partition.",
					"params": {
						"data": "Information attached to the transfer, by the token holder.",
						"partition": "Name of the partition.",
						"to": "Token recipient.",
						"value": "Number of tokens to transfer."
					},
					"returns": {
						"_0": "Destination partition."
					}
				},
				"transferFrom(address,address,uint256)": {
					"details": "Transfer tokens from one address to another.",
					"params": {
						"from": "The address which you want to transfer tokens from.",
						"to": "The address which you want to transfer to.",
						"value": "The amount of tokens to be transferred."
					},
					"returns": {
						"_0": "A boolean that indicates if the operation was successful."
					}
				},
				"transferFromWithData(address,address,uint256,bytes)": {
					"details": "Transfer the amount of tokens on behalf of the address 'from' to the address 'to'.",
					"params": {
						"data": "Information attached to the transfer, and intended for the token holder ('from').",
						"from": "Token holder (or 'address(0)' to set from to 'msg.sender').",
						"to": "Token recipient.",
						"value": "Number of tokens to transfer."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"transferWithData(address,uint256,bytes)": {
					"details": "Transfer the amount of tokens from the address 'msg.sender' to the address 'to'.",
					"params": {
						"data": "Information attached to the transfer, by the token holder.",
						"to": "Token recipient.",
						"value": "Number of tokens to transfer."
					}
				}
			},
			"title": "ERC1400",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/ERC1400.sol": "ERC1400"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/CertificateSigner.sol": {
			"keccak256": "0xa356a96c3a3b63968d009601bc95b65df483b74abdc4a8755721038fa453f1cf",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://b595fd6caaa9f22ed9a6fd1864d00b2280960d0fc1d3378996eda5af21402862",
				"dweb:/ipfs/QmUWSuVqSEF96ZxW1F3GQHuLa6WZ7rvWMJ2vC1XxuK47Fq"
			]
		},
		"contracts/ERC1400.sol": {
			"keccak256": "0xfd1e9c3dae41744e94369f6349467081f0a5f15536c65524162f7050b6df200f",
			"urls": [
				"bzz-raw://a89017b386bbb4058335ba49735205ee5e9730adc3c6b465976f309f6701259a",
				"dweb:/ipfs/QmVKi5pxp9HPwigSMa6jtA8yYJbGxCFWd6NUAKajRs6YRU"
			]
		},
		"contracts/IERC1400.sol": {
			"keccak256": "0xf8fb0d5cb6eb0bd5da86836cf6cbd5c233f5442d5ee1dc53253d761b3627b0c9",
			"urls": [
				"bzz-raw://0ee900a906ec46c5b4fcbe52f88c0db9cb1254ab68bd141ac07d115f3660f1c7",
				"dweb:/ipfs/QmQE6aMScyEu9j6zkS55tXK3m2eGtAMgXYRo2fQTAgJceV"
			]
		},
		"contracts/extensions/tokenExtensions/ERC1400TokensChecker.sol": {
			"keccak256": "0x69f192c654677afa36f4436559e349785c553bdace1a8a7a5f7f608bfa6c065c",
			"urls": [
				"bzz-raw://faee3ed0f9f65e2a680e89bd51583f6554ec27c7cf9a75338f89f5b8b7bf8983",
				"dweb:/ipfs/QmezF9JyUtAsWZZD4gdhCbcGXQb4ggp3RmWjpiwu8F5rEn"
			]
		},
		"contracts/extensions/tokenExtensions/ERC1400TokensValidator.sol": {
			"keccak256": "0xafd96c5f21530912227ef3a56a594fe6abbc0fa098e13d8e458c54ce8379e9d9",
			"urls": [
				"bzz-raw://2cd5f16bc2d746f27ca173269c2f273e928ca723b205aa8ac5fbf9c718248962",
				"dweb:/ipfs/QmamCxGd3Q73MUvXE6jrksgwUvH7S7LWUYTVtH9jRkoH29"
			]
		},
		"contracts/extensions/tokenExtensions/IERC1400TokensChecker.sol": {
			"keccak256": "0x6ebd09355e941847e8cd872f3e7a66002bc60e4f65ea2faebf3e9215b278a92a",
			"urls": [
				"bzz-raw://13bbda5dfc73739d22b119ad0b6b5e0c945f64e1a20490c15870cdef71660ef0",
				"dweb:/ipfs/QmYUay1mbgekG8vtaaXvfLQkRdb7BVXoAAsaPeg92qPqRq"
			]
		},
		"contracts/extensions/tokenExtensions/IERC1400TokensValidator.sol": {
			"keccak256": "0x96b357e319f554a2e46abf704f0971d87c66f916f483dfd2bdbf3e2e0b78545c",
			"urls": [
				"bzz-raw://1966b60443eec753a27cfc7c62e336ea9e3f7fba3736a4c417669187a9d5e202",
				"dweb:/ipfs/QmWFGYCoKKkoXGXwDE1LjhRHyBUhVQ8dbfmdVsZfWYPjAv"
			]
		},
		"contracts/extensions/userExtensions/ERC1400TokensRecipient.sol": {
			"keccak256": "0xcf720efb792be04eea42c629ccd9ec6b912b7479bb2e13ad331bbf5622fb3ef7",
			"urls": [
				"bzz-raw://53752d75e8fbf1d5a72a214e2def1af022aad8236531d7677b44275f87ae29f7",
				"dweb:/ipfs/QmRnZzjvBG9uG45BjeyJ1keyHfYc17rfNkfqZcPWG7oV2t"
			]
		},
		"contracts/extensions/userExtensions/ERC1400TokensSender.sol": {
			"keccak256": "0x60877467e74124c8c893e04b803eada7b3f90cff3c729c478c6ca79f860ce5dc",
			"urls": [
				"bzz-raw://42002e50c84aa215b913790a8556aa372a9eeeab0c4217d4342efb1d7e20b36d",
				"dweb:/ipfs/Qma73CPP2xRTieUntN2KtgUZYq42gFfGoJk7u6HaLohAi3"
			]
		},
		"contracts/extensions/userExtensions/IERC1400TokensRecipient.sol": {
			"keccak256": "0x6bc583d1a37e75b4c09e38477ecd3eb0ecb00a4a437d352d36bacdf3b0643f6e",
			"urls": [
				"bzz-raw://69461c2686518549fad82967459de7e9e9436601736f2c288a328f5660d41906",
				"dweb:/ipfs/QmTrZ5rbxcQo3poz1A5AXSG4S4swMA3EtNo5aWx2VbfrPN"
			]
		},
		"contracts/extensions/userExtensions/IERC1400TokensSender.sol": {
			"keccak256": "0x01040b5c0c97bec4ba23e8704d2bec3a1b689287dc5b8c50759f697a51e10d9e",
			"urls": [
				"bzz-raw://f95ce73f9fdded66fa18fbad61a6b4f646c1f45d4ca37f3236cb208b71b5cd35",
				"dweb:/ipfs/QmPoXsqqj4gABiaArfpfUbiePmxQFVPGmwXfiEvVykwuL7"
			]
		},
		"contracts/interface/ERC1820Implementer.sol": {
			"keccak256": "0x787313c590b50d6c0cc28cf322119dae8fec2ad30d0b78475407c094eeeab2fe",
			"urls": [
				"bzz-raw://d9395f59c03bc54eca2d3b373b4ab6d7f1d3e66783d0b437c730eb6485216570",
				"dweb:/ipfs/QmXHfE1D3Q7f8cgJtvkyJJm2jSt3UUt5hFtQCSh5ZYLevz"
			]
		},
		"contracts/interface/IERC1643.sol": {
			"keccak256": "0x1148340ae449f3826dd691fb042a57d07337714c66096f8dd20ce1dbfe2c60fd",
			"urls": [
				"bzz-raw://406ed78b6254cd6833ea469759cfde23585e03c92b1bacb08b6d662f5ddc56c8",
				"dweb:/ipfs/QmXTSonY6bT4F8N7QdRdaosw8NsPeLFFAjtCkNbb49XdYc"
			]
		},
		"contracts/openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0x7964325af90ec05d3146e23038fccf8c9928b29f900ee91b50fe45468cc43ad8",
			"license": "MIT",
			"urls": [
				"bzz-raw://1affb8886805321a0565e09f0ed1d7b51ebed4a4f3577d0d641421e2803805d9",
				"dweb:/ipfs/QmbPdEczHBGQyqqZpu79Z9p2p4598HykycyjmQxiscSVyt"
			]
		},
		"contracts/openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da",
			"license": "MIT",
			"urls": [
				"bzz-raw://2c3d0973630ed74f2b5ce3944677a885dc70ec32fc83b35f55045a10224da32b",
				"dweb:/ipfs/QmbefZ5RoEZKNHXCALfh683PnaNYzKPcKMFjyY1DVAgq8A"
			]
		},
		"contracts/openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"contracts/openzeppelin/contracts/utils/introspection/IERC1820Registry.sol": {
			"keccak256": "0x6e306f9ab28416a9e5931f0b6e264676e8ac68fad184f9a9d8bb125c6ec23bc3",
			"license": "MIT",
			"urls": [
				"bzz-raw://bd7fe961c914caa1fcc8223d446c1582aec4f2a32d2f06cf09c938b72cf8ce11",
				"dweb:/ipfs/QmPfEfqtUh9SA86br28HfmMyVSBe22B3oPwF8iACCF4evY"
			]
		},
		"contracts/openzeppelin/contracts/utils/math/SafeMath.sol": {
			"keccak256": "0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21",
			"license": "MIT",
			"urls": [
				"bzz-raw://973868f808e88e21a1a0a01d4839314515ee337ad096286c88e41b74dcc11fc2",
				"dweb:/ipfs/QmfYuZxRfx2J2xdk4EXN7jKg4bUYEMTaYk9BAw9Bqn4o2Y"
			]
		},
		"contracts/roles/AllowlistAdminRole.sol": {
			"keccak256": "0xa682cd2438342802e52fae2924826f4266d11113f5f30b40587af8691d05826f",
			"urls": [
				"bzz-raw://443f0c6b9369441069409f583e169fa79253663d479e176959df6268116d51d6",
				"dweb:/ipfs/QmTbAg7bP33Q4jzckRpbfDSpSvn4DttV6shCthL3ocGCn7"
			]
		},
		"contracts/roles/AllowlistedRole.sol": {
			"keccak256": "0x4ddf57e4ab62da38030d6843c450fb0b749993481e2fe207cbde3871961d5636",
			"urls": [
				"bzz-raw://513cff72e4f8dab41f1ba41d855dee6b6ff6de99cac6528473108c48ec0ff731",
				"dweb:/ipfs/QmWH7ZUhmgghtd6NYMuvx7uojf9wXSszukrUV1q63BExSS"
			]
		},
		"contracts/roles/BlocklistAdminRole.sol": {
			"keccak256": "0x7bde2ba9bd805c7fcfb16ba1b6028e078f46f2b82e8f559aaf00b8342b587fe9",
			"urls": [
				"bzz-raw://99f8a32db9642fb9acca4b199f6e0dc1c63b15669a4ddfc02f29c7adb7521c2d",
				"dweb:/ipfs/QmW1N9RHYUVVNksvcRXDGytEtoothijW9adXyKowTnBK8N"
			]
		},
		"contracts/roles/BlocklistedRole.sol": {
			"keccak256": "0xf2264840d35ec2e5d78f56cf107a26905e417996569d60f3dfc295ff34bbeb15",
			"urls": [
				"bzz-raw://a002e6834fc6070df85abb798a89f96e14cac09e02d3a66109218ed08369e15a",
				"dweb:/ipfs/Qmc4d3ujZ8yrRXWMMrH5T2qzYGZyBRaGTgDodpv5qAS8V2"
			]
		},
		"contracts/roles/CertificateSignerRole.sol": {
			"keccak256": "0x3df52dfd0cff66d84c1cd73b7aa04fa5a6370b9a26cec2179a93c8b313528122",
			"urls": [
				"bzz-raw://16bcfe786f6c1f53d8f0368de8c2d20ec9782a819f69bbbd41065e6951ba13ef",
				"dweb:/ipfs/Qmb1J8Z7dmDJ4NsxkNWuYjpFCAcwPfF8GGkF7TkFUbV9SK"
			]
		},
		"contracts/roles/MinterRole.sol": {
			"keccak256": "0x318d73a86276b5c446b93a81875bb1b4c8c1c57c2e8bc65293638687e539c161",
			"urls": [
				"bzz-raw://b3a44139e4bf6b0454f61976b978ca7109ad9916605290aed8d02495a0531e49",
				"dweb:/ipfs/QmWhDoHjhjfLUvkGkYYGwYiAb8V4UfMJgbKw9DawCdwHfj"
			]
		},
		"contracts/roles/PauserRole.sol": {
			"keccak256": "0x4e61b6084651f467ac21eb3a2efe1b90871fe5bbf54ba088734e9e83ec54008e",
			"urls": [
				"bzz-raw://b94441555dee2ea06591309ac21eeef899624fd2325b0f4450211f33734c8769",
				"dweb:/ipfs/Qmaz7X6S6HxdxEkbWdvbxYUBjZo6fixSy6WRrG7iskspqF"
			]
		},
		"contracts/roles/Roles.sol": {
			"keccak256": "0x90ac2a725a9e547642258ed98bcff321146bfa680d4c68b781e0d91ea7cfd0d4",
			"urls": [
				"bzz-raw://1b88a9d1aa79dd0e127524645576684b0930c38c4583986182a071c3039f41a2",
				"dweb:/ipfs/QmdS7fm3shy6QE5zsiMogSFjzvG9qBu4hv6UmZXjHt5n69"
			]
		},
		"contracts/tools/DomainAware.sol": {
			"keccak256": "0x60bfd9cdd67f93368662914f575e00a5ced7d5a9060452b9b50fe09e31e3473c",
			"urls": [
				"bzz-raw://ee54939d05e9ea1267140be4574db6750c2149882acf5f1c72a72352aab89b6b",
				"dweb:/ipfs/QmVajgzuYwLLmFWQjQdArGjiPyt5zopPRMzJepGK2nzYGR"
			]
		},
		"contracts/tools/ERC1820Client.sol": {
			"keccak256": "0x7d2ee601635e3ab8526526a0a475068a2bf71161925603720476231305dedef2",
			"urls": [
				"bzz-raw://684dd36a1a5660bef6581ada0c50000e6113ada39ac9862e9f28c022bb1589c8",
				"dweb:/ipfs/QmQaR6iMk8yQfoRgDUauvHuR1WUZQmzfmxhZPsQMFEVVkH"
			]
		},
		"contracts/tools/ERC1820Registry.sol": {
			"keccak256": "0x4be47aca1916885210538acb908d4f57e86d81ce0acfa76b3dbb8a215ad678b8",
			"urls": [
				"bzz-raw://e3d005472dc66cc957a207bfe7da7fc1efb393af16d819d77ff905e1d6efcaa6",
				"dweb:/ipfs/QmeZtrfQzQvxfK2sJGrjfgxkBBDiLMDjP2L6QhJWTMqoNF"
			]
		},
		"contracts/tools/Pausable.sol": {
			"keccak256": "0x50408db0a442b72a072c16652b6ea7bc35bd5493dddc307ccb85664a2cb28146",
			"urls": [
				"bzz-raw://d6f137eb5de377f6a86138d73b2129d6a6272e8808ca7269f99b1af82fadd786",
				"dweb:/ipfs/QmX87E9iFtF7AUvPpRHL3FWxW5axZvpyGpxx53BZQiZheM"
			]
		}
	},
	"version": 1
}